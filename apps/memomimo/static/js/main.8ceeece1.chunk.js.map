{"version":3,"sources":["App.tsx","registerServiceWorker.ts","index.tsx"],"names":["textArray","split","map","x","trim","filter","levels","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onMouseUp","evt","screenW","window","innerWidth","pageX","changeLevel","app","assertThisInitialized","currentHidden","Array","length","_","state","levelIndex","react","className","idx","text","repeat","key","d","newLevelIndex","Math","max","min","len","level","numToHide","round","slice","forEach","setState","React","document","onkeyup","event","getInstance","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","src_App_0","getElementById","URL","process","toString","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8ceeece1.chunk.js","sourcesContent":["import * as _ from \"lodash\"\nimport * as React from 'react'\nimport './App.css'\n\nconst originalText = `\n🌑\n안녕\n어둠속에서 울고있니?\n눈물이 앞을 가려서 어둠이 보이니?\n\n🐚\n동굴처럼 외롭고 또 외롭니?\n누군가가 다가와주길 기다리는 순간이니?\n\n👂🏼\n너의 이야기를 들어줄 사람\n귀 기울여줄 사람 말할 사람 있니?\n\n👨‍👦\n너에게 무엇을 해 줄 수 있을까\n어른은 아이에게 무엇일까\n누가 어른일까\n\n🎁\n내 말이 너에게 위로가 된다면\n내 말이 너에게 선물이라면\n그렇게 위로해주고 싶다\n\n⏳\n그 시간 속에서 같이 있고\n같이 여행하고 웃다보면\n어느새 어두운 동굴 속을 빠져나와있겠지\n나와 함께\n\n🌸\n무궁화 꽃이 피었습니다\n(6개동작)\n(마지막 천천히 하면서)\n무궁화 꽃이 피었다\n`\nconst SPACE = \" \"\nconst ARROW_LEFT = \"ArrowLeft\"\nconst ARROW_RIGHT = \"ArrowRight\"\n\nconst textArray = originalText.split(\"\\n\").map(x => x.trim()).filter(x => x)\nconst levels = [0, 0.4, 0.55, 0.7, 1]\n\ninterface IAppState {\n  currentHidden: boolean[]\n  levelIndex: number\n}\n\nclass App extends React.Component<any, IAppState> {\n  public static getInstance(): App {\n    return App.app\n  }\n  private static app: App\n\n  constructor(props: any) {\n    super(props)\n    App.app = this\n    const currentHidden = new Array(textArray.length)\n    _.fill(currentHidden, false)\n    this.state = {\n      currentHidden,\n      levelIndex: 0,\n    }\n  }\n\n  public render() {\n    const { currentHidden } = this.state\n    return (\n      <div className=\"App\" onMouseUp={this.onMouseUp} >\n        {textArray.map((x, idx) => {\n          let text: string\n          if (currentHidden[idx]) {\n            text = \"_\".repeat(textArray[idx].length)\n          } else {\n            text = textArray[idx]\n          }\n          return (\n            <div key={idx}>\n              {text}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n\n  public changeLevel(d: number) {\n    const { levelIndex } = this.state\n    let newLevelIndex\n    switch (d) {\n      case 0:\n        newLevelIndex = levelIndex\n        break\n      case -1:\n        newLevelIndex = Math.max(levelIndex - 1, 0)\n        break\n      case 1:\n        newLevelIndex = Math.min(levelIndex + 1, levels.length - 1)\n        break\n      default:\n        return\n    }\n    const len = textArray.length\n    const currentHidden = new Array(len).map(x => false)\n\n    const level = levels[newLevelIndex]\n    const numToHide:number = Math.round(textArray.length * level)\n    _.shuffle(_.range(len))\n      .slice(0, numToHide)\n      .forEach((x:number) => {currentHidden[x] = true})\n    this.setState({ levelIndex: newLevelIndex, currentHidden })\n  }\n\n  private onMouseUp = (evt: any) => {\n    const screenW = window.innerWidth\n    const { pageX } = evt\n    if (pageX < screenW * (1 / 3)) {\n      this.changeLevel(-1)\n    } else if (pageX < screenW * (2 / 3)) {\n      this.changeLevel(0)\n    } else {\n      this.changeLevel(1)\n    }\n  }\n}\n\nexport default App\n\ndocument.onkeyup = event => {\n  switch (event.key) {\n    case SPACE:\n      App.getInstance().changeLevel(0)\n      break\n    case ARROW_LEFT:\n      App.getInstance().changeLevel(-1)\n      break\n    case ARROW_RIGHT:\n      App.getInstance().changeLevel(1)\n      break\n    default:\n      return\n  }\n}\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.')\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.')\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n)\nregisterServiceWorker()\n"],"sourceRoot":""}