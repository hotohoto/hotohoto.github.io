{"version":3,"sources":["bg/IMG_8257.JPG","bg/IMG_9734.JPG","App.js","index.js","registerServiceWorker.js","bg/IMG_5249.JPG","bg/IMG_8008.JPG"],"names":["module","exports","__webpack_require__","p","backgroundImagesPublic","bg1","bg3","bg4","backgroundImagesWithJH","concat","bg2","getZeroPaddedNumber","num","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","backgroundImage","param","queryString","parse","window","location","search","dday","moment","undefined","byDays","bg","title","indexOf","Math","floor","random","length","state","setInterval","forceUpdate","timeText1","timeText2","now","ddayTextBase","ddayMsec","diff","passed","abs","diffDays","diffHours","diffMinutes","diffSecs","format","react_default","a","createElement","className","style","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","addEventListener","swUrl","process","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8UCSlCC,EAAyB,CAACC,IAAKC,IAAKC,KACpCC,EAAsB,GAAAC,OAAOL,EAAP,CAA+BM,MAErDC,EAAsB,SAAAC,GAAG,OAAIA,GAAO,GAAKA,EAAM,IAAMA,GAqF5CC,cAlFb,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IAEN,IAIIQ,EAJEC,EAAQC,IAAYC,MAAMC,OAAOC,SAASC,QAH/B,OAIjBL,EAAMM,KAASN,EAAMM,MAAQC,IAAOP,EAAMM,YAAUE,EACpDR,EAAMS,YAA0BD,IAAjBR,EAAMS,OAKnBV,EADEC,EAAMU,GACUV,EAAMU,GACfV,EAAMW,OAASX,EAAMW,MAAMC,QAAQ,iBAAS,EACnC3B,EAAuB4B,KAAKC,MAAMD,KAAKE,SAAW9B,EAAuB+B,SAEzEnC,EAAuBgC,KAAKC,MAAMD,KAAKE,SAAWlC,EAAuBmC,SAG7FjB,EAAe,OAAAb,OAAUa,EAAV,KAEfP,EAAKyB,MAAQ,CAACjB,QAAOD,mBAGrBmB,YAAY,WACV1B,EAAK2B,eACJnB,EAAMS,OAAS,IAAY,KAxBbjB,wEA4BjB,IAKI4B,EACAC,EANEC,EAAMf,MAEJP,EAAUL,KAAKsB,MAAfjB,MACAS,EAAwBT,EAAxBS,OAAQE,EAAgBX,EAAhBW,MAAOL,EAASN,EAATM,KAKvB,GAAIA,EAAM,CACR,IACIiB,EADAC,EAAWF,EAAIG,KAAKnB,EAAM,gBAE9B,GAAiB,OAAbkB,EAAmB,CACrB,IAAME,EAASF,EAAW,EAC1BA,EAAWX,KAAKc,IAAIH,GACpB,IAAMI,EAAWf,KAAKC,MAAMU,EAAW,IAAO,GAAK,GAAK,IACxD,GAAIf,EACFc,EAAeK,MACV,CACL,IAAMC,EAAYzC,EAAoByB,KAAKC,MAAMU,EAAW,IAAO,GAAK,GAAK,KACvEM,EAAc1C,EAAoByB,KAAKC,MAAMU,EAAW,IAAO,GAAK,KACpEO,EAAW3C,EAAoByB,KAAKC,MAAMU,EAAW,IAAO,KAClED,EAAY,GAAArC,OAAM0C,EAAN,KAAA1C,OAAkB2C,EAAlB,KAAA3C,OAA+B4C,EAA/B,KAAA5C,OAA8C6C,GAE5DX,GAAaM,EAAS,KAAO,MAAQH,QAGvCH,EAAYE,EAAIU,OAAO,cAClBvB,IACHY,EAAYC,EAAIU,OAAO,aAI3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAACtC,gBAAiBJ,KAAKsB,MAAMlB,kBACvDkC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACZzB,GACCsB,EAAAC,EAAAC,cAAA,WAAMxB,GAERsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZhB,GAEFC,GACCY,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZf,aAzECiB,yBCPlBC,IAASC,OAAOP,EAAAC,EAAAC,cAACM,EAAD,MAASC,SAASC,eAAe,SCIF,kBAAmBC,WAC9DzC,OAAO0C,iBAAiB,OAAQ,WAC9B,IAAMC,EAAK,GAAA5D,OAAM6D,eAAN,sBACXH,UAAUI,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBpC,QACf2B,UAAUI,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,0BCtCrEnF,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.8e6d6344.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMG_8257.e7de9c9f.JPG\";","module.exports = __webpack_public_path__ + \"static/media/IMG_9734.36c19c61.JPG\";","import React, { Component } from 'react';\nimport moment from 'moment'\nimport queryString from 'query-string'\nimport './App.css';\nimport bg1 from './bg/IMG_5249.JPG'\nimport bg2 from './bg/IMG_8008.JPG'\nimport bg3 from './bg/IMG_8257.JPG'\nimport bg4 from './bg/IMG_9734.JPG'\n\nconst backgroundImagesPublic = [bg1, bg3, bg4]\nconst backgroundImagesWithJH = [...backgroundImagesPublic, bg2]\n\nconst getZeroPaddedNumber = num => num >= 10 ? num : '0' + num\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    const param = queryString.parse(window.location.search)\n    param.dday =  (param.dday && moment(param.dday)) || undefined\n    param.byDays = param.byDays !== undefined\n\n    let backgroundImage\n\n    if (param.bg) {\n      backgroundImage = param.bg\n    } else if (param.title && param.title.indexOf('지혜') >= 0) {\n      backgroundImage = backgroundImagesWithJH[Math.floor(Math.random() * backgroundImagesWithJH.length)]\n    } else {\n      backgroundImage = backgroundImagesPublic[Math.floor(Math.random() * backgroundImagesPublic.length)]\n    }\n\n    backgroundImage = `url(${backgroundImage})`\n\n    this.state = {param, backgroundImage};\n\n    // Toggle the state every minute or every second\n    setInterval(() => {\n      this.forceUpdate()\n    }, param.byDays ? 1000 * 60 : 1000)\n  }\n\n  render() {\n    const now = moment()\n\n    const { param } = this.state\n    const { byDays, title, dday } = param\n\n    let timeText1\n    let timeText2\n\n    if (dday) {\n      let ddayMsec = now.diff(dday, 'milliseconds')\n      let ddayTextBase\n      if (ddayMsec !== null) {\n        const passed = ddayMsec > 0\n        ddayMsec = Math.abs(ddayMsec)\n        const diffDays = Math.floor(ddayMsec / 1000 / 60 / 60 / 24)\n        if (byDays) {\n          ddayTextBase = diffDays\n        } else {\n          const diffHours = getZeroPaddedNumber(Math.floor(ddayMsec / 1000 / 60 / 60 % 24))\n          const diffMinutes = getZeroPaddedNumber(Math.floor(ddayMsec / 1000 / 60 % 60))\n          const diffSecs = getZeroPaddedNumber(Math.floor(ddayMsec / 1000 % 60))\n          ddayTextBase = `${diffDays} ${diffHours}:${diffMinutes}:${diffSecs}`\n        }\n        timeText1 = (passed ? 'D+' : 'D-') + ddayTextBase\n      }\n    } else {\n      timeText1 = now.format('YYYY:MM:DD')\n      if (!byDays) {\n        timeText2 = now.format('HH:mm:ss')\n      }\n    }\n\n    return (\n      <div className='App' style={{backgroundImage: this.state.backgroundImage}}>\n        <div className='container'>\n          <div className='display-3 p-3 rounded textBox'>\n            {title &&\n              <div>{title}</div>\n            }\n            <div className='datetime'>\n              {timeText1}\n            </div>\n            {timeText2 &&\n              <div className='datetime'>\n                {timeText2}\n              </div>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n          registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            installingWorker.onstatechange = () => {\n              if (installingWorker.state === 'installed') {\n                if (navigator.serviceWorker.controller) {\n                  // At this point, the old content will have been purged and\n                  // the fresh content will have been added to the cache.\n                  // It's the perfect time to display a \"New content is\n                  // available; please refresh.\" message in your web app.\n                  console.log('New content is available; please refresh.');\n                } else {\n                  // At this point, everything has been precached.\n                  // It's the perfect time to display a\n                  // \"Content is cached for offline use.\" message.\n                  console.log('Content is cached for offline use.');\n                }\n              }\n            };\n          };\n        })\n        .catch(error => {\n          console.error('Error during service worker registration:', error);\n        });\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/IMG_5249.a31e3f03.JPG\";","module.exports = __webpack_public_path__ + \"static/media/IMG_8008.964cc1a7.JPG\";"],"sourceRoot":""}